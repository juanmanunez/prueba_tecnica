{"ast":null,"code":"import { ADD_TASK, ADD_TASK_SUCCESS, ADD_TASK_ERROR, START_GET_TASK, GET_TASK_SUCCESS, GET_TASK_ERROR, GET_TASK_DELETED, TASK_DELETED_SUCCESS, TASK_DELETED_ERROR, GET_TASK_EDITED, START_TASK_EDITED, TASK_EDITED_SUCCESS, TASK_EDITED_ERROR } from '../types';\nconst initialState = {\n  tasks: [],\n  error: false,\n  loading: false,\n  taskDelete: null,\n  taskEdit: null\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_TASK:\n    case START_GET_TASK:\n      return { ...state,\n        loading: true\n      };\n\n    case ADD_TASK_SUCCESS:\n      return { ...state,\n        loading: false,\n        error: false,\n        tasks: [...state.tasks, action.payload]\n      };\n\n    case ADD_TASK_ERROR:\n    case GET_TASK_ERROR:\n    case TASK_DELETED_ERROR:\n      return { ...state,\n        loading: false,\n        error: true\n      };\n\n    case GET_TASK_SUCCESS:\n      return { ...state,\n        loading: false,\n        error: null,\n        tasks: action.payload\n      };\n\n    case GET_TASK_DELETED:\n      return { ...state,\n        taskDelete: action.payload\n      };\n\n    case TASK_DELETED_SUCCESS:\n      return { ...state,\n        tasks: state.tasks.filter(t => t.id !== state.taskDelete),\n        taskDelete: null\n      };\n\n    case GET_TASK_EDITED:\n      return { ...state,\n        taskEdit: action.payload\n      };\n\n    case TASK_EDITED_SUCCESS:\n      return { ...state,\n        taskEdit: null,\n        tasks: state.tasks.map(t => t.id === action.payload.id ? t = action.payload : t)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/juanma/Documents/GitHub/prueba_tecnica/src/reducers/tasksReducer.js"],"names":["ADD_TASK","ADD_TASK_SUCCESS","ADD_TASK_ERROR","START_GET_TASK","GET_TASK_SUCCESS","GET_TASK_ERROR","GET_TASK_DELETED","TASK_DELETED_SUCCESS","TASK_DELETED_ERROR","GET_TASK_EDITED","START_TASK_EDITED","TASK_EDITED_SUCCESS","TASK_EDITED_ERROR","initialState","tasks","error","loading","taskDelete","taskEdit","state","action","type","payload","filter","t","id","map"],"mappings":"AAAA,SACIA,QADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,gBALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,oBARJ,EASIC,kBATJ,EAUIC,eAVJ,EAWIC,iBAXJ,EAYIC,mBAZJ,EAaIC,iBAbJ,QAcO,UAdP;AAgBA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,KAAK,EAAE,KAFU;AAGjBC,EAAAA,OAAO,EAAE,KAHQ;AAIjBC,EAAAA,UAAU,EAAE,IAJK;AAKjBC,EAAAA,QAAQ,EAAE;AALO,CAArB;AAQA,eAAe,UAASC,KAAK,GAAGN,YAAjB,EAA+BO,MAA/B,EAAuC;AAElD,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKrB,QAAL;AACA,SAAKG,cAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHH,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKf,gBAAL;AACI,aAAO,EACH,GAAGkB,KADA;AAEHH,QAAAA,OAAO,EAAE,KAFN;AAGHD,QAAAA,KAAK,EAAE,KAHJ;AAIHD,QAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiBM,MAAM,CAACE,OAAxB;AAJJ,OAAP;;AAMJ,SAAKpB,cAAL;AACA,SAAKG,cAAL;AACA,SAAKG,kBAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHH,QAAAA,OAAO,EAAE,KAFN;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ,SAAKX,gBAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHH,QAAAA,OAAO,EAAE,KAFN;AAGHD,QAAAA,KAAK,EAAE,IAHJ;AAIHD,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAJX,OAAP;;AAMJ,SAAKhB,gBAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAFhB,OAAP;;AAIJ,SAAKf,oBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAoBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,KAAK,CAACF,UAAxC,CAFJ;AAGHA,QAAAA,UAAU,EAAE;AAHT,OAAP;;AAMJ,SAAKR,eAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHD,QAAAA,QAAQ,EAAEE,MAAM,CAACE;AAFd,OAAP;;AAIJ,SAAKX,mBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHD,QAAAA,QAAQ,EAAE,IAFP;AAGHJ,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYY,GAAZ,CAAiBF,CAAC,IACrBA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACE,OAAP,CAAeG,EAAxB,GAA6BD,CAAC,GAAGJ,MAAM,CAACE,OAAxC,GAAkDE,CAD/C;AAHJ,OAAP;;AAOJ;AACI,aAAOL,KAAP;AAzDR;AA2DH","sourcesContent":["import {\n    ADD_TASK,\n    ADD_TASK_SUCCESS,\n    ADD_TASK_ERROR,\n    START_GET_TASK,\n    GET_TASK_SUCCESS,\n    GET_TASK_ERROR,\n    GET_TASK_DELETED,\n    TASK_DELETED_SUCCESS,\n    TASK_DELETED_ERROR,\n    GET_TASK_EDITED,\n    START_TASK_EDITED,\n    TASK_EDITED_SUCCESS,\n    TASK_EDITED_ERROR,\n} from '../types';\n\nconst initialState = {\n    tasks: [],\n    error: false,\n    loading: false,\n    taskDelete: null,\n    taskEdit: null,\n}\n\nexport default function(state = initialState, action) {\n\n    switch(action.type) {\n\n        case ADD_TASK:\n        case START_GET_TASK:\n            return {\n                ...state,\n                loading: true\n            }\n        case ADD_TASK_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: false,\n                tasks: [...state.tasks, action.payload]\n            }\n        case ADD_TASK_ERROR:\n        case GET_TASK_ERROR:\n        case TASK_DELETED_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: true\n            }\n\n        case GET_TASK_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                tasks: action.payload\n            }\n        case GET_TASK_DELETED:\n            return {\n                ...state,\n                taskDelete: action.payload\n            }\n        case TASK_DELETED_SUCCESS:\n            return {\n                ...state,\n                tasks: state.tasks.filter( t => t.id !== state.taskDelete),\n                taskDelete: null\n            }\n\n        case GET_TASK_EDITED:\n            return {\n                ...state,\n                taskEdit: action.payload\n            }\n        case TASK_EDITED_SUCCESS:\n            return {\n                ...state,\n                taskEdit: null,\n                tasks: state.tasks.map( t => \n                    t.id === action.payload.id ? t = action.payload : t\n                )\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}